// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Serv.h"
#include <thrift/protocol/TBinaryProtocol.h>
//#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>
#include <thrift/server/TNonblockingServer.h>
#include <thrift/protocol/TDebugProtocol.h>
#include <thrift/concurrency/ThreadManager.h>
#include <thrift/concurrency/PosixThreadFactory.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

#include<iostream>
using namespace std;
int qps=0;

class ServHandler : virtual public ServIf {
 public:
  ServHandler() {
    // Your initialization goes here
  }

  void put(StudentResult& _return, const StudentRequest& s) {
    // Your implementation goes here
    cout<<s.sname<<endl;
    cout<<s.ssex<<endl;
    cout<<s.sage<<endl;
    cout<<s.sno<<endl;
    _return.ret = 123123;
    _return.smsg = "fdadfa";
    //printf("put\n");
  }

};

using namespace ::apache::thrift;
using namespace ::apache::thrift::concurrency;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<ServHandler> handler(new ServHandler());
  shared_ptr<TProcessor> processor(new ServProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());
  //shared_ptr<TProtocolFactory> protocolFactory = new TDebugProtocoal(); 

  //TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);

  shared_ptr<ThreadManager> threadManager = ThreadManager::newSimpleThreadManager(30);
  shared_ptr<PosixThreadFactory> threadFactory = shared_ptr<PosixThreadFactory>(new PosixThreadFactory());
  threadManager->threadFactory(threadFactory);
  threadManager->start(); 
  
  shared_ptr<TNonblockingServer> server(new TNonblockingServer(processor, protocolFactory,9090, threadManager));


  //shared_ptr<TNonblockingServer> server(new TNonblockingServer(processor, protocolFactory,serverTransport,NULL));

  server->serve();
  return 0;
}

