/**
 * Autogenerated by Thrift Compiler (0.9.1)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef stu_TYPES_H
#define stu_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <thrift/cxxfunctional.h>




typedef struct _StudentRequest__isset {
  _StudentRequest__isset() : sno(false), sname(false), ssex(false), sage(false) {}
  bool sno;
  bool sname;
  bool ssex;
  bool sage;
} _StudentRequest__isset;

class StudentRequest {
 public:

  static const char* ascii_fingerprint; // = "457B6E35E5EAAA1DBF18D6B3763BD82E";
  static const uint8_t binary_fingerprint[16]; // = {0x45,0x7B,0x6E,0x35,0xE5,0xEA,0xAA,0x1D,0xBF,0x18,0xD6,0xB3,0x76,0x3B,0xD8,0x2E};

  StudentRequest() : sno(0), sname(), ssex(0), sage(0) {
  }

  virtual ~StudentRequest() throw() {}

  int32_t sno;
  std::string sname;
  bool ssex;
  int16_t sage;

  _StudentRequest__isset __isset;

  void __set_sno(const int32_t val) {
    sno = val;
  }

  void __set_sname(const std::string& val) {
    sname = val;
  }

  void __set_ssex(const bool val) {
    ssex = val;
  }

  void __set_sage(const int16_t val) {
    sage = val;
  }

  bool operator == (const StudentRequest & rhs) const
  {
    if (!(sno == rhs.sno))
      return false;
    if (!(sname == rhs.sname))
      return false;
    if (!(ssex == rhs.ssex))
      return false;
    if (!(sage == rhs.sage))
      return false;
    return true;
  }
  bool operator != (const StudentRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StudentRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StudentRequest &a, StudentRequest &b);

typedef struct _StudentResult__isset {
  _StudentResult__isset() : ret(false), smsg(false) {}
  bool ret;
  bool smsg;
} _StudentResult__isset;

class StudentResult {
 public:

  static const char* ascii_fingerprint; // = "3F5FC93B338687BC7235B1AB103F47B3";
  static const uint8_t binary_fingerprint[16]; // = {0x3F,0x5F,0xC9,0x3B,0x33,0x86,0x87,0xBC,0x72,0x35,0xB1,0xAB,0x10,0x3F,0x47,0xB3};

  StudentResult() : ret(0), smsg() {
  }

  virtual ~StudentResult() throw() {}

  int32_t ret;
  std::string smsg;

  _StudentResult__isset __isset;

  void __set_ret(const int32_t val) {
    ret = val;
  }

  void __set_smsg(const std::string& val) {
    smsg = val;
  }

  bool operator == (const StudentResult & rhs) const
  {
    if (!(ret == rhs.ret))
      return false;
    if (!(smsg == rhs.smsg))
      return false;
    return true;
  }
  bool operator != (const StudentResult &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const StudentResult & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(StudentResult &a, StudentResult &b);



#endif
