// Autogenerated by Thrift Compiler (0.9.1)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package stu

import (
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
	"math"
)

// (needed to ensure safety because of naive import list construction.)
var _ = math.MinInt32
var _ = thrift.ZERO
var _ = fmt.Printf

var GoUnusedProtection__ int

type StudentRequest struct {
	Sno   int32  `thrift:"sno,1"`
	Sname string `thrift:"sname,2"`
	Ssex  bool   `thrift:"ssex,3"`
	Sage  int16  `thrift:"sage,4"`
}

func NewStudentRequest() *StudentRequest {
	return &StudentRequest{}
}

func (p *StudentRequest) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StudentRequest) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Sno = v
	}
	return nil
}

func (p *StudentRequest) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Sname = v
	}
	return nil
}

func (p *StudentRequest) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadBool(); err != nil {
		return fmt.Errorf("error reading field 3: %s")
	} else {
		p.Ssex = v
	}
	return nil
}

func (p *StudentRequest) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI16(); err != nil {
		return fmt.Errorf("error reading field 4: %s")
	} else {
		p.Sage = v
	}
	return nil
}

func (p *StudentRequest) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StudentRequest"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *StudentRequest) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sno", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:sno: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Sno)); err != nil {
		return fmt.Errorf("%T.sno (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:sno: %s", p, err)
	}
	return err
}

func (p *StudentRequest) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sname", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:sname: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Sname)); err != nil {
		return fmt.Errorf("%T.sname (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:sname: %s", p, err)
	}
	return err
}

func (p *StudentRequest) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ssex", thrift.BOOL, 3); err != nil {
		return fmt.Errorf("%T write field begin error 3:ssex: %s", p, err)
	}
	if err := oprot.WriteBool(bool(p.Ssex)); err != nil {
		return fmt.Errorf("%T.ssex (3) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 3:ssex: %s", p, err)
	}
	return err
}

func (p *StudentRequest) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("sage", thrift.I16, 4); err != nil {
		return fmt.Errorf("%T write field begin error 4:sage: %s", p, err)
	}
	if err := oprot.WriteI16(int16(p.Sage)); err != nil {
		return fmt.Errorf("%T.sage (4) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 4:sage: %s", p, err)
	}
	return err
}

func (p *StudentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StudentRequest(%+v)", *p)
}

type StudentResult struct {
	Ret  int32  `thrift:"ret,1"`
	Smsg string `thrift:"smsg,2"`
}

func NewStudentResult() *StudentResult {
	return &StudentResult{}
}

func (p *StudentResult) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return fmt.Errorf("%T read error", p)
	}
	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return fmt.Errorf("%T field %d read error: %s", p, fieldId, err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return fmt.Errorf("%T read struct end error: %s", p, err)
	}
	return nil
}

func (p *StudentResult) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return fmt.Errorf("error reading field 1: %s")
	} else {
		p.Ret = v
	}
	return nil
}

func (p *StudentResult) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return fmt.Errorf("error reading field 2: %s")
	} else {
		p.Smsg = v
	}
	return nil
}

func (p *StudentResult) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("StudentResult"); err != nil {
		return fmt.Errorf("%T write struct begin error: %s", p, err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return fmt.Errorf("%T write field stop error: %s", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return fmt.Errorf("%T write struct stop error: %s", err)
	}
	return nil
}

func (p *StudentResult) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("ret", thrift.I32, 1); err != nil {
		return fmt.Errorf("%T write field begin error 1:ret: %s", p, err)
	}
	if err := oprot.WriteI32(int32(p.Ret)); err != nil {
		return fmt.Errorf("%T.ret (1) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 1:ret: %s", p, err)
	}
	return err
}

func (p *StudentResult) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("smsg", thrift.STRING, 2); err != nil {
		return fmt.Errorf("%T write field begin error 2:smsg: %s", p, err)
	}
	if err := oprot.WriteString(string(p.Smsg)); err != nil {
		return fmt.Errorf("%T.smsg (2) field write error: %s", p)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return fmt.Errorf("%T write field end error 2:smsg: %s", p, err)
	}
	return err
}

func (p *StudentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("StudentResult(%+v)", *p)
}
