// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: a.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "a.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ProtoCS {

namespace {

const ::google::protobuf::Descriptor* MsgHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MsgHead_reflection_ = NULL;
const ::google::protobuf::Descriptor* Msg_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Msg_reflection_ = NULL;
const ::google::protobuf::Descriptor* DD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DD_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CmdID_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_a_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AssignDesc_a_2eproto() {
  protobuf_AddDesc_a_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "a.proto");
  GOOGLE_CHECK(file != NULL);
  MsgHead_descriptor_ = file->message_type(0);
  static const int MsgHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, cid_),
  };
  MsgHead_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      MsgHead_descriptor_,
      MsgHead::default_instance_,
      MsgHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _has_bits_[0]),
      -1,
      -1,
      sizeof(MsgHead),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MsgHead, _internal_metadata_),
      -1);
  Msg_descriptor_ = file->message_type(1);
  static const int Msg_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, head_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, ret_ret_ret_),
  };
  Msg_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Msg_descriptor_,
      Msg::default_instance_,
      Msg_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _extensions_),
      sizeof(Msg),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Msg, _internal_metadata_),
      -1);
  DD_descriptor_ = file->message_type(2);
  static const int DD_offsets_[1] = {
  };
  DD_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      DD_descriptor_,
      DD::default_instance_,
      DD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DD, _has_bits_[0]),
      -1,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DD, _extensions_),
      sizeof(DD),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DD, _internal_metadata_),
      -1);
  CmdID_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_a_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      MsgHead_descriptor_, &MsgHead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Msg_descriptor_, &Msg::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      DD_descriptor_, &DD::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_a_2eproto() {
  delete MsgHead::default_instance_;
  delete MsgHead_reflection_;
  delete Msg::default_instance_;
  delete Msg_reflection_;
  delete DD::default_instance_;
  delete DD_reflection_;
}

void protobuf_AddDesc_a_2eproto() GOOGLE_ATTRIBUTE_COLD;
void protobuf_AddDesc_a_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\007a.proto\022\007ProtoCS\"\026\n\007MsgHead\022\013\n\003cid\030\001 \001"
    "(\005\"A\n\003Msg\022\036\n\004head\030\001 \001(\0132\020.ProtoCS.MsgHea"
    "d\022\023\n\013ret_ret_ret\030\002 \001(\005*\005\010d\020\311\001\"\013\n\002DD*\005\010d\020"
    "\311\001*\024\n\005CmdID\022\013\n\007CID_MOD\020\001", 144);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "a.proto", &protobuf_RegisterTypes);
  MsgHead::default_instance_ = new MsgHead();
  Msg::default_instance_ = new Msg();
  DD::default_instance_ = new DD();
  MsgHead::default_instance_->InitAsDefaultInstance();
  Msg::default_instance_->InitAsDefaultInstance();
  DD::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_a_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_a_2eproto {
  StaticDescriptorInitializer_a_2eproto() {
    protobuf_AddDesc_a_2eproto();
  }
} static_descriptor_initializer_a_2eproto_;
const ::google::protobuf::EnumDescriptor* CmdID_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CmdID_descriptor_;
}
bool CmdID_IsValid(int value) {
  switch(value) {
    case 1:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MsgHead::kCidFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MsgHead::MsgHead()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCS.MsgHead)
}

void MsgHead::InitAsDefaultInstance() {
}

MsgHead::MsgHead(const MsgHead& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCS.MsgHead)
}

void MsgHead::SharedCtor() {
  _cached_size_ = 0;
  cid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MsgHead::~MsgHead() {
  // @@protoc_insertion_point(destructor:ProtoCS.MsgHead)
  SharedDtor();
}

void MsgHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MsgHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MsgHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MsgHead_descriptor_;
}

const MsgHead& MsgHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_a_2eproto();
  return *default_instance_;
}

MsgHead* MsgHead::default_instance_ = NULL;

MsgHead* MsgHead::New(::google::protobuf::Arena* arena) const {
  MsgHead* n = new MsgHead;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MsgHead::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoCS.MsgHead)
  cid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool MsgHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCS.MsgHead)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 cid = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCS.MsgHead)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCS.MsgHead)
  return false;
#undef DO_
}

void MsgHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCS.MsgHead)
  // optional int32 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->cid(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCS.MsgHead)
}

::google::protobuf::uint8* MsgHead::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCS.MsgHead)
  // optional int32 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->cid(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCS.MsgHead)
  return target;
}

int MsgHead::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoCS.MsgHead)
  int total_size = 0;

  // optional int32 cid = 1;
  if (has_cid()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->cid());
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MsgHead::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoCS.MsgHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const MsgHead* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const MsgHead>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoCS.MsgHead)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoCS.MsgHead)
    MergeFrom(*source);
  }
}

void MsgHead::MergeFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoCS.MsgHead)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void MsgHead::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoCS.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MsgHead::CopyFrom(const MsgHead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoCS.MsgHead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MsgHead::IsInitialized() const {

  return true;
}

void MsgHead::Swap(MsgHead* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MsgHead::InternalSwap(MsgHead* other) {
  std::swap(cid_, other->cid_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata MsgHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MsgHead_descriptor_;
  metadata.reflection = MsgHead_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MsgHead

// optional int32 cid = 1;
bool MsgHead::has_cid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void MsgHead::set_has_cid() {
  _has_bits_[0] |= 0x00000001u;
}
void MsgHead::clear_has_cid() {
  _has_bits_[0] &= ~0x00000001u;
}
void MsgHead::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
 ::google::protobuf::int32 MsgHead::cid() const {
  // @@protoc_insertion_point(field_get:ProtoCS.MsgHead.cid)
  return cid_;
}
 void MsgHead::set_cid(::google::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:ProtoCS.MsgHead.cid)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Msg::kHeadFieldNumber;
const int Msg::kRetRetRetFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Msg::Msg()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCS.Msg)
}

void Msg::InitAsDefaultInstance() {
  head_ = const_cast< ::ProtoCS::MsgHead*>(&::ProtoCS::MsgHead::default_instance());
}

Msg::Msg(const Msg& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCS.Msg)
}

void Msg::SharedCtor() {
  _cached_size_ = 0;
  head_ = NULL;
  ret_ret_ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Msg::~Msg() {
  // @@protoc_insertion_point(destructor:ProtoCS.Msg)
  SharedDtor();
}

void Msg::SharedDtor() {
  if (this != default_instance_) {
    delete head_;
  }
}

void Msg::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Msg::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Msg_descriptor_;
}

const Msg& Msg::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_a_2eproto();
  return *default_instance_;
}

Msg* Msg::default_instance_ = NULL;

Msg* Msg::New(::google::protobuf::Arena* arena) const {
  Msg* n = new Msg;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Msg::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoCS.Msg)
  _extensions_.Clear();
  if (_has_bits_[0 / 32] & 3u) {
    if (has_head()) {
      if (head_ != NULL) head_->::ProtoCS::MsgHead::Clear();
    }
    ret_ret_ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Msg::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCS.Msg)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ProtoCS.MsgHead head = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_head()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_ret_ret_ret;
        break;
      }

      // optional int32 ret_ret_ret = 2;
      case 2: {
        if (tag == 16) {
         parse_ret_ret_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_ret_ret_)));
          set_has_ret_ret_ret();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        if ((800u <= tag && tag < 1608u)) {
          DO_(_extensions_.ParseField(tag, input, default_instance_,
                                      mutable_unknown_fields()));
          continue;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCS.Msg)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCS.Msg)
  return false;
#undef DO_
}

void Msg::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCS.Msg)
  // optional .ProtoCS.MsgHead head = 1;
  if (has_head()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->head_, output);
  }

  // optional int32 ret_ret_ret = 2;
  if (has_ret_ret_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret_ret_ret(), output);
  }

  // Extension range [100, 201)
  _extensions_.SerializeWithCachedSizes(
      100, 201, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCS.Msg)
}

::google::protobuf::uint8* Msg::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCS.Msg)
  // optional .ProtoCS.MsgHead head = 1;
  if (has_head()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->head_, false, target);
  }

  // optional int32 ret_ret_ret = 2;
  if (has_ret_ret_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret_ret_ret(), target);
  }

  // Extension range [100, 201)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 201, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCS.Msg)
  return target;
}

int Msg::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoCS.Msg)
  int total_size = 0;

  if (_has_bits_[0 / 32] & 3u) {
    // optional .ProtoCS.MsgHead head = 1;
    if (has_head()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          *this->head_);
    }

    // optional int32 ret_ret_ret = 2;
    if (has_ret_ret_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret_ret_ret());
    }

  }
  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Msg::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoCS.Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const Msg* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Msg>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoCS.Msg)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoCS.Msg)
    MergeFrom(*source);
  }
}

void Msg::MergeFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoCS.Msg)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_head()) {
      mutable_head()->::ProtoCS::MsgHead::MergeFrom(from.head());
    }
    if (from.has_ret_ret_ret()) {
      set_ret_ret_ret(from.ret_ret_ret());
    }
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Msg::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoCS.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Msg::CopyFrom(const Msg& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoCS.Msg)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Msg::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void Msg::Swap(Msg* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Msg::InternalSwap(Msg* other) {
  std::swap(head_, other->head_);
  std::swap(ret_ret_ret_, other->ret_ret_ret_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata Msg::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Msg_descriptor_;
  metadata.reflection = Msg_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Msg

// optional .ProtoCS.MsgHead head = 1;
bool Msg::has_head() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Msg::set_has_head() {
  _has_bits_[0] |= 0x00000001u;
}
void Msg::clear_has_head() {
  _has_bits_[0] &= ~0x00000001u;
}
void Msg::clear_head() {
  if (head_ != NULL) head_->::ProtoCS::MsgHead::Clear();
  clear_has_head();
}
const ::ProtoCS::MsgHead& Msg::head() const {
  // @@protoc_insertion_point(field_get:ProtoCS.Msg.head)
  return head_ != NULL ? *head_ : *default_instance_->head_;
}
::ProtoCS::MsgHead* Msg::mutable_head() {
  set_has_head();
  if (head_ == NULL) {
    head_ = new ::ProtoCS::MsgHead;
  }
  // @@protoc_insertion_point(field_mutable:ProtoCS.Msg.head)
  return head_;
}
::ProtoCS::MsgHead* Msg::release_head() {
  // @@protoc_insertion_point(field_release:ProtoCS.Msg.head)
  clear_has_head();
  ::ProtoCS::MsgHead* temp = head_;
  head_ = NULL;
  return temp;
}
void Msg::set_allocated_head(::ProtoCS::MsgHead* head) {
  delete head_;
  head_ = head;
  if (head) {
    set_has_head();
  } else {
    clear_has_head();
  }
  // @@protoc_insertion_point(field_set_allocated:ProtoCS.Msg.head)
}

// optional int32 ret_ret_ret = 2;
bool Msg::has_ret_ret_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Msg::set_has_ret_ret_ret() {
  _has_bits_[0] |= 0x00000002u;
}
void Msg::clear_has_ret_ret_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
void Msg::clear_ret_ret_ret() {
  ret_ret_ret_ = 0;
  clear_has_ret_ret_ret();
}
 ::google::protobuf::int32 Msg::ret_ret_ret() const {
  // @@protoc_insertion_point(field_get:ProtoCS.Msg.ret_ret_ret)
  return ret_ret_ret_;
}
 void Msg::set_ret_ret_ret(::google::protobuf::int32 value) {
  set_has_ret_ret_ret();
  ret_ret_ret_ = value;
  // @@protoc_insertion_point(field_set:ProtoCS.Msg.ret_ret_ret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DD::DD()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:ProtoCS.DD)
}

void DD::InitAsDefaultInstance() {
}

DD::DD(const DD& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:ProtoCS.DD)
}

void DD::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DD::~DD() {
  // @@protoc_insertion_point(destructor:ProtoCS.DD)
  SharedDtor();
}

void DD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DD_descriptor_;
}

const DD& DD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_a_2eproto();
  return *default_instance_;
}

DD* DD::default_instance_ = NULL;

DD* DD::New(::google::protobuf::Arena* arena) const {
  DD* n = new DD;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DD::Clear() {
// @@protoc_insertion_point(message_clear_start:ProtoCS.DD)
  _extensions_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool DD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ProtoCS.DD)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0 ||
        ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      goto success;
    }
    if ((800u <= tag && tag < 1608u)) {
      DO_(_extensions_.ParseField(tag, input, default_instance_,
                                  mutable_unknown_fields()));
      continue;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
success:
  // @@protoc_insertion_point(parse_success:ProtoCS.DD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ProtoCS.DD)
  return false;
#undef DO_
}

void DD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ProtoCS.DD)
  // Extension range [100, 201)
  _extensions_.SerializeWithCachedSizes(
      100, 201, output);

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:ProtoCS.DD)
}

::google::protobuf::uint8* DD::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:ProtoCS.DD)
  // Extension range [100, 201)
  target = _extensions_.InternalSerializeWithCachedSizesToArray(
      100, 201, false, target);

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ProtoCS.DD)
  return target;
}

int DD::ByteSize() const {
// @@protoc_insertion_point(message_byte_size_start:ProtoCS.DD)
  int total_size = 0;

  total_size += _extensions_.ByteSize();

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DD::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ProtoCS.DD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  const DD* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const DD>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ProtoCS.DD)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ProtoCS.DD)
    MergeFrom(*source);
  }
}

void DD::MergeFrom(const DD& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ProtoCS.DD)
  if (GOOGLE_PREDICT_FALSE(&from == this)) {
    ::google::protobuf::internal::MergeFromFail(__FILE__, __LINE__);
  }
  _extensions_.MergeFrom(from._extensions_);
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void DD::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ProtoCS.DD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DD::CopyFrom(const DD& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ProtoCS.DD)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DD::IsInitialized() const {


  if (!_extensions_.IsInitialized()) return false;  return true;
}

void DD::Swap(DD* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DD::InternalSwap(DD* other) {
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
  _extensions_.Swap(&other->_extensions_);
}

::google::protobuf::Metadata DD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DD_descriptor_;
  metadata.reflection = DD_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DD

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProtoCS

// @@protoc_insertion_point(global_scope)
